{"version":3,"sources":["components/Header/index.tsx","components/Ball.tsx","components/Antto/index.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","Ball","memo","number","colorClass","getNumber","console","log","arr","Array","fill","map","v","i","shuffle","length","push","splice","Math","floor","random","card6","slice","sort","a","b","cardBonus","Antto","list","balls","bounsBall","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oNAWeA,G,WARA,WACX,OACI,4BAAQC,UAAU,cAAlB,kB,OCsBOC,EArBFC,gBAAM,YAAqB,IAAnBC,EAAkB,EAAlBA,OACbC,EAAa,GAajB,OAXID,GAAU,GACVC,EAAa,UACND,GAAU,GACjBC,EAAa,WACND,GAAU,GACjBC,EAAa,WACND,GAAU,KACjBC,EAAa,YAKb,yBAAKJ,UAAS,eAAUI,IACnBD,MCEPE,EAAY,WACdC,QAAQC,IAAR,kBAGA,IAFA,IAAMC,EAAMC,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAGC,GAAJ,OAAUA,EAAE,KACxCC,EAAU,GACVN,EAAIO,OAAS,GACfD,EAAQE,KAAKR,EAAIS,OAAOC,KAAKC,MAAMD,KAAKE,SAAWZ,EAAIO,QAAQ,GAAG,IAEtE,IAAIM,EAAQP,EAAQQ,MAAM,EAAE,GAAGC,MAAK,SAACC,EAAEC,GAAH,OAASD,EAAIC,KAC7CC,EAAYZ,EAAQQ,MAAM,EAAE,GAChC,MAAM,GAAN,mBAAWD,GAAX,YAAqBK,KAGVC,EAhCD,WACV,IAAMC,EAAOvB,IACPwB,EAAQD,EAAKN,MAAM,EAAE,GACvBQ,EAAYF,EAAKN,MAAM,EAAE,GAAG,GAEhC,OACI,8BAEQO,EAAMlB,KAAI,SAACE,GACP,OAAO,kBAAC,EAAD,CAAMV,OAAQU,OAG7B,yDAEI,kBAAC,EAAD,CAAMV,OAAQ2B,MCHfC,MATf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.6e903583.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            안또\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { memo } from 'react';\r\n\r\ninterface IBall  {\r\n    number: number\r\n}\r\n\r\nconst Ball = memo( ({number}:IBall) => {\r\n    let colorClass = '';\r\n\r\n    if (number <= 10) {\r\n        colorClass = 'color-1';\r\n    } else if (number <= 20) {\r\n        colorClass = 'color-11';\r\n    } else if (number <= 30) {\r\n        colorClass = 'color-21';\r\n    } else if (number <= 40) {\r\n        colorClass = 'color-31';\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={`ball ${colorClass}`} >\r\n            {number}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Ball;","import React from 'react';\r\nimport Ball from 'components/Ball';\r\n\r\n\r\nconst Antto = () => {\r\n    const list = getNumber();\r\n    const balls = list.slice(0,6);\r\n    let bounsBall = list.slice(6,7)[0];\r\n    \r\n    return (\r\n        <main>\r\n            {\r\n                balls.map((i) => {\r\n                    return <Ball number={i} />\r\n                })\r\n            }\r\n            <div>보너스볼</div>\r\n            {\r\n                <Ball number={bounsBall} />\r\n            }\r\n        </main>\r\n    )\r\n}\r\n\r\nconst getNumber = (): number[] => {\r\n    console.log(`call getNumber`)\r\n    const arr = Array(45).fill(0).map((v, i) => i+1);\r\n    const shuffle = [];\r\n    while(arr.length > 0) {\r\n        shuffle.push(arr.splice(Math.floor(Math.random() * arr.length),1)[0])\r\n    }\r\n    let card6 = shuffle.slice(0,6).sort((a,b) => a - b);\r\n    let cardBonus = shuffle.slice(6,7);\r\n    return [...card6, ...cardBonus]\r\n}\r\n\r\nexport default Antto;","import React from 'react';\nimport logo from 'logo.svg';\nimport './App.css';\nimport Header from 'components/Header';\nimport Antto from 'components/Antto';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Antto />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}